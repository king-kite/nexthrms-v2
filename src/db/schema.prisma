// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Asset {
  id String @id @default(uuid()) @db.Uuid

  assetId      String         @map("asset_id") @db.VarChar(250)
  condition    AssetCondition @default(GOOD)
  description  String?
  model        String?        @db.VarChar(150)
  manufacturer String         @db.VarChar(150)
  name         String         @db.VarChar(150)
  purchaseDate DateTime       @default(now()) @map("purchase_date")
  purchaseFrom String         @map("purchase_from") @db.VarChar(250)
  serialNo     String         @map("serial_no") @db.VarChar(150)
  supplier     String         @db.VarChar(250) // Supplied or Delivered By
  status       AssetStatus    @default(PENDING)
  warranty     Int // Warranty in months
  value        Int

  userId String? @map("user_id") @db.Uuid
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([id], map: "asset_item_id")
  @@index([userId], map: "asset_user_id")
  @@map("assets")
}

model Attendance {
  id       String    @id @default(uuid()) @db.Uuid
  date     DateTime  @default(now())
  punchIn  DateTime  @map("punch_in") @db.Time()
  punchOut DateTime? @map("punch_out") @db.Time()

  employeeId String   @map("employee_id") @db.Uuid
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  overtimeId String?   @unique @map("overtime_id") @db.Uuid
  overtime   Overtime? @relation(fields: [overtimeId], references: [id], onDelete: SetNull)

  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([date, employeeId])
  @@index([id], map: "attendance_id")
  @@index([employeeId], map: "attendance_employee_id")
  @@map("attendance")
}

model Client {
  id       String @id @default(uuid()) @db.Uuid
  company  String @db.VarChar(255)
  position String @db.VarChar(100)

  contact   User   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String @unique @map("contact_id") @db.Uuid

  projects Project[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([id], map: "client_id")
  @@map("clients")
}

model Department {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique @db.VarChar(50)

  hod   Employee? @relation("departmentHod", fields: [hodId], references: [id], onDelete: SetNull)
  hodId String?   @unique @map("hod_id") @db.Uuid

  employees Employee[] @relation("departmentEmployees")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([id], map: "department_id")
  @@index([name], map: "department_name")
  @@map("departments")
}

model Employee {
  id           String      @id @default(uuid()) @db.Uuid
  department   Department? @relation("departmentEmployees", fields: [departmentId], references: [id], onDelete: SetNull)
  departmentId String?     @map("department_id") @db.Uuid

  hod Department? @relation("departmentHod")

  jobId String? @map("job_id") @db.Uuid
  job   Job?    @relation(fields: [jobId], references: [id], onDelete: SetNull)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id") @db.Uuid

  supervisorId String?   @map("supervisor_id") @db.Uuid
  supervisor   Employee? @relation("otheremployees", fields: [supervisorId], references: [id], onDelete: SetNull)

  employees Employee[] @relation("otheremployees")

  attendance Attendance[]

  projectFiles        ProjectFile[]
  projectTeam         ProjectTeam[]
  projectTaskFollower ProjectTaskFollower[]

  leaves           Leave[] @relation("employeeLeaves")
  createdByLeaves  Leave[] @relation("createdByLeaves")
  approvedByLeaves Leave[] @relation("approvedByLeaves")

  overtime           Overtime[] @relation("employeeOvertime")
  createdByOvertime  Overtime[] @relation("createdByOvertime")
  approvedByOvertime Overtime[] @relation("approvedByOvertime")

  dateEmployed DateTime @default(now()) @map("date_employed")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([id], map: "employee_id")
  @@index([departmentId], map: "employee_department_id")
  @@index([jobId], map: "employee_job_id")
  @@index([supervisorId], map: "supervisor_id")
  @@map("employees")
}

model Group {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique @db.VarChar(100)
  description String? @db.VarChar(300)
  active      Boolean @default(true)

  objectPermissions PermissionObject[] @relation("permission_object_groups")
  permissions       Permission[]       @relation("group_permissions")
  users             User[]             @relation("group_users")

  @@index([id], map: "group_id")
  @@map("groups")
}

model Holiday {
  id   String   @id @default(uuid()) @db.Uuid
  name String   @db.VarChar(100)
  date DateTime @db.Date

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([name, date])
  @@index([id], map: "holiday_id")
  @@map("holiday")
}

model Job {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique @db.VarChar(50)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  employees Employee[]

  @@index([id], map: "job_id")
  @@index([name], map: "job_name")
  @@map("jobs")
}

model Leave {
  id        String       @id @default(uuid()) @db.Uuid
  reason    String
  startDate DateTime     @map("start_date")
  endDate   DateTime     @map("end_date")
  type      LeaveChoices @default(CASUAL)
  status    LeaveStatus  @default(PENDING)

  employeeId String   @map("employee_id") @db.Uuid
  employee   Employee @relation("employeeLeaves", fields: [employeeId], references: [id], onDelete: Cascade)

  createdById String?   @map("created_by") @db.Uuid
  createdBy   Employee? @relation("createdByLeaves", fields: [createdById], references: [id], onDelete: SetNull)

  approvedById String?   @map("approved_by") @db.Uuid
  approvedBy   Employee? @relation("approvedByLeaves", fields: [approvedById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([id], map: "leave_id")
  @@index([employeeId], map: "leave_employee_id")
  @@index([createdById], map: "leave_created_by_id")
  @@map("leaves")
}

model Notification {
  id        String              @id @default(uuid()) @db.Uuid
  title     String              @default("This is a title")
  message   String
  messageId String?             @map("message_id") @db.Uuid
  read      Boolean             @default(false)
  type      NotificationChoices

  sender   User?   @relation("notificationSender", fields: [senderId], references: [id], onDelete: SetNull)
  senderId String? @map("sender_id") @db.Uuid

  recipient   User?   @relation("notificationRecipient", fields: [recipientId], references: [id], onDelete: SetNull)
  recipientId String? @map("recipient_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([recipientId], map: "notification_recipient_id")
  @@index([senderId], map: "notification_sender_id")
  @@map("notifications")
}

model Overtime {
  id     String          @id @default(uuid()) @db.Uuid
  type   OvertimeChoices @default(VOLUNTARY)
  date   DateTime
  hours  Int
  reason String
  status LeaveStatus     @default(PENDING)

  employeeId String   @map("employee_id") @db.Uuid
  employee   Employee @relation("employeeOvertime", fields: [employeeId], references: [id], onDelete: Cascade)

  createdById String?   @map("created_by") @db.Uuid
  createdBy   Employee? @relation("createdByOvertime", fields: [createdById], references: [id], onDelete: SetNull)

  approvedById String?   @map("approved_by") @db.Uuid
  approvedBy   Employee? @relation("approvedByOvertime", fields: [approvedById], references: [id], onDelete: SetNull)

  attendance Attendance?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([date, employeeId])
  @@index([id], map: "overtime_id")
  @@index([createdById], map: "overtime_created_by_id")
  @@index([employeeId], map: "overtime_employee_id")
  @@map("overtime")
}

// Model/Table Level Permissions
model Permission {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique @db.VarChar(200)
  codename    String  @unique @db.VarChar(100)
  description String? @db.VarChar(300)

  categoryId String?             @map("category_id") @db.Uuid
  category   PermissionCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  groups Group[] @relation("group_permissions")
  users  User[]  @relation("permission_users")

  @@index([id], map: "permission_id")
  @@map("permissions")
}

model PermissionCategory {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique @db.VarChar(100)

  permissions Permission[]

  @@index([id], map: "permission_category_id")
  @@map("permission_categories")
}

// Object Level Permissions
model PermissionObject {
  id String @id @default(uuid()) @db.Uuid

  modelName PermissionModelChoices @map("model_name")
  objectId  String                 @map("object_id") @db.Uuid

  permission PermissionChoices

  groups Group[] @relation("permission_object_groups")
  users  User[]  @relation("permission_object_users")

  @@unique([modelName, objectId, permission])
  @@index([id], map: "permission_object_id")
  @@map("permissions_objects")
}

model Profile {
  id               String    @id @default(uuid()) @db.Uuid
  dob              DateTime?
  image            String    @default("/images/default.png")
  imageStorageInfo Json?     @map("image_storage_info")
  address          String?
  city             String?   @db.VarChar(20)
  phone            String?   @db.VarChar(20)
  state            String?   @db.VarChar(100)
  gender           Gender    @default(MALE)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id") @db.Uuid

  @@index([id], map: "profile_id")
  @@map("users_profile")
}

model Project {
  id          String          @id @default(uuid()) @db.Uuid
  completed   Boolean         @default(false)
  description String
  initialCost Float           @default(0) @map("initial_cost")
  name        String          @unique @db.VarChar(255)
  priority    ProjectPriority @default(HIGH)
  rate        Float           @default(0)
  startDate   DateTime        @default(now()) @map("start_date")
  endDate     DateTime        @map("end_date")

  client   Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)
  clientId String? @map("client_id") @db.Uuid

  files ProjectFile[]
  tasks ProjectTask[]
  team  ProjectTeam[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([id], map: "project_id")
  @@index([name], map: "project_name")
  @@index([clientId], map: "project_client_id")
  @@map("projects")
}

model ProjectFile {
  id          String @id @default(uuid()) @db.Uuid
  name        String @db.VarChar(255)
  file        String
  size        Int
  storageInfo Json?
  type        String @default("application") @map("type")

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @map("project_id") @db.Uuid

  employee   Employee? @relation(fields: [uploadedBy], references: [id], onDelete: SetNull)
  uploadedBy String?   @map("uploaded_by") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([projectId], map: "project_file_project_id")
  @@index([uploadedBy], map: "project_file_uploaded_by")
  @@map("projects_files")
}

model ProjectTeam {
  id       String  @id @default(uuid()) @db.Uuid
  isLeader Boolean @default(false) @map("is_leader")

  employeeId String   @map("employee_id") @db.Uuid
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  projectId String  @map("project_id") @db.Uuid
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([projectId, employeeId])
  @@index([employeeId], map: "project_team_employee_id")
  @@index([projectId], map: "project_team_project_id")
  @@map("projects_team")
}

model ProjectTask {
  id          String          @id @default(uuid()) @db.Uuid
  name        String          @db.VarChar(255)
  description String
  completed   Boolean         @default(false)
  priority    ProjectPriority @default(HIGH)

  followers ProjectTaskFollower[]

  dueDate   DateTime @map("due_date")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  projectId String  @map("project_id") @db.Uuid
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([id], map: "task_id")
  @@index([name], map: "task_name")
  @@index([projectId], map: "task_project_id")
  @@map("projects_tasks")
}

model ProjectTaskFollower {
  id       String  @id @default(uuid()) @db.Uuid
  isLeader Boolean @default(false) @map("is_leader")

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String   @map("employee_id") @db.Uuid

  task   ProjectTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String      @map("task_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([taskId, employeeId])
  @@index([taskId], map: "project_task_follower_task_id")
  @@index([employeeId], map: "project_task_follower_employee_id")
  @@map("projects_tasks_followers")
}

model Token {
  id      String            @id @default(uuid()) @db.Uuid
  uid     String // Represents the user's id
  type    VerificationToken // Represents the type of token Token i.e for email verification or password reset
  token   String            @unique
  expires DateTime          @db.Date

  @@unique([uid, token]) // The same user can't have the same token
  @@index([uid], map: "token_uid")
  @@index([token], map: "token_token")
  @@map("tokens")
}

model User {
  id        String @id @default(uuid()) @db.Uuid
  email     String @unique @db.VarChar(255)
  firstName String @default("") @map("first_name") @db.VarChar(150)
  lastName  String @default("") @map("last_name") @db.VarChar(150)

  isActive        Boolean @default(true) @map("is_active")
  isAdmin         Boolean @default(false) @map("is_admin")
  isEmailVerified Boolean @default(false) @map("email_verified")
  isSuperUser     Boolean @default(false) @map("is_superuser")

  password String @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  assets            Asset[]
  client            Client?
  employee          Employee?
  groups            Group[]            @relation("group_users")
  objectPermissions PermissionObject[] @relation("permission_object_users")
  permissions       Permission[]       @relation("permission_users")
  profile           Profile?
  sender            Notification[]     @relation("notificationSender")
  recipient         Notification[]     @relation("notificationRecipient")

  @@index([id], map: "user_id")
  @@index([email], map: "user_email")
  @@map("users")
}

enum Gender {
  MALE
  FEMALE
}

enum AssetCondition {
  BAD
  EXCELLENT
  GOOD
}

enum AssetStatus {
  APPROVED
  DENIED
  PENDING
  RETURNED
}

enum LeaveChoices {
  ANNUAL
  CASUAL
  HOSPITALIZATION
  LOP
  MATERNITY
  PATERNITY
  SICK
}

enum LeaveStatus {
  APPROVED
  DENIED
  EXPIRED
  PENDING
}

enum NotificationChoices {
  LEAVE
  OVERTIME
}

enum OvertimeChoices {
  COMPULSORY
  HOLIDAY
  VOLUNTARY
}

enum PermissionChoices {
  CREATE
  DELETE
  EDIT
  VIEW
}

enum PermissionModelChoices {
  assets
  attendance
  clients
  deparments
  employees
  groups
  holiday
  jobs
  leaves
  overtime
  projects
  projects_files
  projects_tasks
  projects_tasks_followers
  projects_team
  users
}

enum ProjectPriority {
  HIGH
  MEDIUM
  LOW
}

enum VerificationToken {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}
